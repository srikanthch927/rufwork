import pytest
from httpx import AsyncClient
from main import app  # Replace with the actual file name where the FastAPI app is defined

@pytest.mark.asyncio
async def test_valid_chart_request():
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get(
            "/investment-info-agent",
            params={
                "eci": 12345,
                "package_id": "PKG123",
                "account_id": "ACC456",
                "trailing_period": "YTD",
                "request_type": "chart",
            }
        )
    assert response.status_code == 200
    data = response.json()
    assert data["eci"] == "0000012345"
    assert data["package_id"] == "PKG123"
    assert "market_value" in data
    assert data["market_value"]["value"] == 12345.67

@pytest.mark.asyncio
async def test_invalid_trailing_period():
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get(
            "/investment-info-agent",
            params={
                "eci": 12345,
                "package_id": "PKG123",
                "account_id": "ACC456",
                "trailing_period": "INVALID",
                "request_type": "chart",
            }
        )
    assert response.status_code == 200
    data = response.json()
    assert "error" in data
    assert data["error"] == "Invalid trailing period"

@pytest.mark.asyncio
async def test_invalid_request_type():
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get(
            "/investment-info-agent",
            params={
                "eci": 12345,
                "package_id": "PKG123",
                "account_id": "ACC456",
                "trailing_period": "YTD",
                "request_type": "invalid_type",
            }
        )
    assert response.status_code == 200
    data = response.json()
    assert "error" in data
    assert data["error"] == "Invalid request type"

@pytest.mark.asyncio
async def test_no_account_data_response():
    async def mock_get_api_response(*args, **kwargs):
        return {}  # Simulate no account data

    app.dependency_overrides[get_api_response] = mock_get_api_response

    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get(
            "/investment-info-agent",
            params={
                "eci": 12345,
                "package_id": "PKG123",
                "account_id": "ACC456",
                "trailing_period": "YTD",
                "request_type": "chart",
            }
        )
    assert response.status_code == 200
    data = response.json()
    assert data["status_code"] == "NO_DATA_FOUND"

    app.dependency_overrides = {}  # Clear overrides after test

@pytest.mark.asyncio
async def test_unhandled_exception():
    async def mock_get_api_response(*args, **kwargs):
        raise Exception("Simulated Exception")

    app.dependency_overrides[get_api_response] = mock_get_api_response

    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get(
            "/investment-info-agent",
            params={
                "eci": 12345,
                "package_id": "PKG123",
                "account_id": "ACC456",
                "trailing_period": "YTD",
                "request_type": "chart",
            }
        )
    assert response.status_code == 200
    data = response.json()
    assert "ApplicationError" in data

    app.dependency_overrides = {}  # Clear overrides after test

import unittest
from components import (
    populate_directly_mapped_data,
    append_unique_component,
    populate_sub_category_unique,
    construct_component_fixed_unique,
    find_or_create_category,
    find_or_create_sub_category,
    append_component,
)
from config import sub_category_config,category_mapping
class TestProcessData(unittest.TestCase):
    def setUp(self):
        self.llm_output = {
            "eci": "0449828929",
            "package_id": "c8c2e71d",
            "agent": "WealthPlan v3.5 GPT",
            "status_code": 200,
            "plan_level_results": [
                {
                    "category": "Financial Review",
                    "sub_category": "Wealth plan future inflows",
                    "summaries": [
                        {"scenario": "advisor or client led plan", "summary": "in plan level", "lrcc_valid": True}
                    ],
                    "Insights": []
                }
            ],
            "goal_level_results": [
                {
                    "category": "Financial Review",
                    "sub_category": "Wealth plan future inflows",
                    "summaries": [
                        {"scenario": "advisor or client led plan", "summary": "in goal level", "lrcc_valid": True}
                    ],
                    "Insights": [{"scenario": "advisor or client led plan", "Insight": "in goal level insights"}]
                }
            ]
        }

        self.input_list = [
            {},  # Placeholder for unused index 0
            [{"Plan Assets": 0, "Current Assets": 0, "Future Assets": 0}],
            [{"Name": "Retirement", "Target Amount": 6000.0, "Gap Amount": 0}],
            [{"Name": "Bank accounts", "Total": 60569.97, "flag_type": "Assets"}],
            [{"Total Future Contributions Expected": 0}],
            [{"inflow": "small business income", "expected_income": 120000.0}],
            [{"Entity Name": "", "Relationship": ""}],
            [{"name": "rebeca", "relationship": "client"}]
        ]

    def test_valid_data(self):
        from components import process_data
        result = process_data(self.llm_output, self.input_list)
        self.assertEqual(result["status_code"], 200)
        self.assertIn("categories", result)
        self.assertGreater(len(result["categories"]), 0)

    def test_empty_llm_output(self):
        from components import process_data

        empty_llm_output = {}
        result = process_data(empty_llm_output, self.input_list)
        self.assertEqual(result["status_code"], 500)
        self.assertEqual(len(result["categories"]), 0)


    def test_empty_input_list(self):
        from components import process_data
        with self.assertRaises(ValueError) as context:
            process_data(self.llm_output, [])
        self.assertEqual(str(context.exception), "input_list must contain at least 8 elements.")


    def test_partial_input_list(self):
        from components import process_data

        partial_input_list = self.input_list[:5]  # Incomplete input list
        with self.assertRaises(ValueError) as context:
            process_data(self.llm_output, partial_input_list)
        self.assertEqual(str(context.exception), "input_list must contain at least 8 elements.")

    def test_no_categories_created(self):
        from components import process_data
        llm_output_with_no_results = {
            "eci": "0449828929",
            "package_id": "c8c2e71d",
            "agent": "WealthPlan v3.5 GPT",
            "status_code": 200,
            "plan_level_results": [],
            "goal_level_results": []
        }
        result = process_data(llm_output_with_no_results, self.input_list)
        self.assertEqual(result["status_code"], 200)
        self.assertEqual(len(result["categories"]), 0)  # Ensure no categories are added


    def test_duplicate_components(self):
        from components import process_data
        duplicate_llm_output = self.llm_output.copy()
        duplicate_llm_output["goal_level_results"].append(duplicate_llm_output["goal_level_results"][0])
        result = process_data(duplicate_llm_output, self.input_list)
        category = result["categories"][0]
        sub_category = category["subCategories"][0]
        components = sub_category["components"]
        self.assertEqual(len(components), len(set((c["ComponentName"], c["ComponentCategory"]) for c in components)))

    def test_invalid_llm_output_format(self):
        from components import process_data
        invalid_llm_output = {"status_code": 200, "plan_level_results": "not a list"}
        result = process_data(invalid_llm_output, self.input_list)
        self.assertEqual(result["status_code"], 500)

    def test_missing_sub_category(self):
        from components import process_data
        missing_sub_category_llm_output = self.llm_output.copy()
        missing_sub_category_llm_output["goal_level_results"][0].pop("sub_category")
        result = process_data(missing_sub_category_llm_output, self.input_list)
        self.assertEqual(result["status_code"], 200)

    def test_invalid_input_list_format(self):
        from components import process_data
        invalid_input_list = "not a list"
        with self.assertRaises(TypeError) as context:
            process_data(self.llm_output, invalid_input_list)
        self.assertEqual(str(context.exception), "input_list must be a list.")

    def test_populate_directly_mapped_data(self):
        categories = []
        populate_directly_mapped_data(categories, sub_category_config, data_mapping, category_mapping)
        self.assertEqual(len(categories), 2)
        self.assertEqual(categories[0]["name"], "Category1")
        self.assertEqual(categories[1]["name"], "Category2")

    def test_append_unique_component(self):
        sub_category_data = {"components": []}
        append_unique_component(sub_category_data, "type1", "name1", "category1", [{"data": "value1"}])
        self.assertEqual(len(sub_category_data["components"]), 1)
        append_unique_component(sub_category_data, "type1", "name1", "category1", [{"data": "value1"}])
        self.assertEqual(len(sub_category_data["components"]), 1)  # Should not append duplicate

    def test_populate_sub_category_unique(self):
        data_item = {
            "sub_category": "SubCategory1",
            "Insights": [{"Insight": "Insight1"}],
            "summaries": [{"summary": "Summary1"}]
        }
        existing_sub_category = {"components": []}
        result = populate_sub_category_unique(data_item, sub_category_config, data_mapping, existing_sub_category)
        self.assertIsNotNone(result)
        self.assertNotEqual(len(result["components"]), 3)  # Insight, Summary, Config component

    def test_construct_component_fixed_unique_valid_data(self):
        llm_output = {
            "eci": "ECI123",
            "package_id": "PKG123",
            "agent": "Agent1",
            "status_code": 200,
            "plan_level_results": [
                {"category": "Category1", "sub_category": "SubCategory1", "Insights": []}
            ],
            "goal_level_results": [
                {"category": "Category2", "sub_category": "SubCategory2", "summaries": []}
            ]
        }
        result = construct_component_fixed_unique(llm_output, sub_category_config, data_mapping, category_mapping)
        self.assertEqual(result["status_code"], 200)
        self.assertIn("categories", result)
        self.assertGreater(len(result["categories"]), 0)

    def test_construct_component_fixed_unique_empty_llm_output(self):
        empty_llm_output = {}
        result = construct_component_fixed_unique(empty_llm_output, sub_category_config, data_mapping, category_mapping)
        self.assertEqual(result["status_code"], 500)
        self.assertEqual(len(result["categories"]), 0)

if __name__ == "__main__":
    unittest.main()

from calling import *

data_mapping = {
        "assest_details_tile": input_list[1],
        "goals": input_list[2],
        "account_details": input_list[3],
        "expected_inflows_and_contributions": input_list[4],
        "future_inflow_details": input_list[5],
        "entity_affiliation": input_list[6],
        "financial_and_retirement_info": input_list[7]
    }
